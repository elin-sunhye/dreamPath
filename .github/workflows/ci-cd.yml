name: Ci_Cd_yml

on:
  push:
    branches: ["main"]
# main 브렌치에 푸시가 일어나면 아래 실행

jobs:
  # job의 이름 push-build 푸시 빌드
  push-build:
    runs-on: ubuntu-latest

    # 단계 설정
    steps:
      # 1단계
      - name: ✅ Checkout
        uses: actions/checkout@v4

      # 2단계 react .env 파일 생성
      - name: 🗝️ Create-Env
        run: |
          chmod 777 -R front
          cat << EOL > front/.env
          VITE_PORTONE_STOREID=${{ secrets.VITE_PORTONE_STOREID }}
          VITE_PORTONE_API_KEY=${{ secrets.VITE_PORTONE_API_KEY }}
          EOL
          cat front/.env

      # 3단계 springboot application-secret.yml 파일 생성
      - name: 🗝️ Create-Application-Secret
        run: |
          chmod 777 -R back
          cat << EOL > back/src/main/resources/application-secret.yml
          spring:
            config:
              activate:
                on-profile: secret
          
            datasource:
              driver-class-name: com.mysql.cj.jdbc.Driver
              url: jdbc:mysql://${{ secrets.RDS_DATASOURCE_URL }}:3306/${{ secrets.DB_NAME }}
              username: ${{ secrets.DB_USERNAME }}
              password: ${{ secrets.DB_PASSWORD }}
          
            mail:
              host: smtp.gmail.com
              port: 587
              username: ${{ secrets.SMTP_USERNAME }}
              password: ${{ secrets.SMTP_PASSWORD }}
              properties:
                mail:
                  smtp:
                    auth: true
                    timeout: 5000
                    starttls:
                      enable: true
            security:
              oauth2:
                client:
                  registration:
                    google:
                      client-id: ${{ secrets.OAUTH2_GOOGLE_ID }}
                      client-secret: ${{ secrets.OAUTH2_GOOGLE_SECRET }}
                    naver:
                      client-id: ${{ secrets.OAUTH2_NAVER_ID }}
                      client-secret: ${{ secrets.OAUTH2_NAVER_SECRET }}
          
          jwt:
            secret: ${{ secrets.JWT_SECRET }}
          
          coolsms:
            api:
              key: ${{ secrets.COOLSMS_KEY }}
              secret: ${{ secrets.COOLSMS_SECRET }}
              from: ${{ secrets.COOLSMS_FROM }}
          EOL
          cat back/src/main/resources/application-secret.yml

      # 4단계
      - name: 🖨️ Print-Directory
        run: |
          ls -a front
          ls -a back/src/main/resources

      # 5단계 도커 로그인
      - name: 📥 Docker-Hub-Login
        uses: docker/login-action@v3.4.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 6단계 리액트 도커 빌드 푸시
      - name: 🗄️ Build-And-Push-React-App
        run: |
          cd front
          docker build -t ${{ secrets.DOCKER_USERNAME }}/board-react-app .
          docker push ${{ secrets.DOCKER_USERNAME }}/board-react-app:latest

      # 7단계 스프링 도커 빌드 푸시
      - name: 🗄️ Build-And-Push-Spring-App
        run: |
          cd back
          docker build -t ${{ secrets.DOCKER_USERNAME }}/board-spring-app .
          docker push ${{ secrets.DOCKER_USERNAME }}/board-spring-app:latest

  # job의 이름 deploy 배포
  deploy:
    needs: push-build # push-build 작업 끝난 루 작업 시작
    runs-on: ubuntu-latest
    steps:
      - name: 🔐 ssh
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.SSH_KEY }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/board-react-app:latest
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/board-spring-app:latest
            cd /home/ubuntu/project
            sudo docker-compose -f poroject-compose.yml down
            sudo docker-compose -f poroject-compose.yml up -d
